"stdlib.h "
char* itoa(int num, char *str, int radix){
其中：num是你给出的整数； 
str是一个字符串数组，转换后的结果将存放其中 
radix指定转换输出的进制；最小值是2，最大值是32。 


#define MAXN 25
#define elem_t int
void reverse(elem_t* str,int n){
	if (n<=1) return;
	elem_t temp=str[n-1];
	str[n-1]=str[0];
	str[0]=temp;
	reverse(str+1,n-2);
}


sprintf(str, "%d", num);

//未完成
int Itoa(int div, int buff[], int x){
	int i, mod, len = 0;
	for(i=0; i<MAXN; i++) buff[i] = 0;
	do{
		mod = div%x;
		div = div/x;
		buff[len] = mod;
		len++;
	}while(div > 0);
	reverse(buff, len);
	return len;
}

i2=atoi(c1);      //将字符数组转化为整数
f1=atof(c1);      //将字符数组转化为浮点型
itoa(i1,c2,10);   //将整型转化为字符数组  10为10进制的意思 

http://hi.baidu.com/qwpsmile/blog/item/9bc44efa4f41018a9f514637.html/cmtid/d2d586fa0b71dfdab48f318c

定义函数  long int strtol(const char *nptr,char **endptr,int base);
函数说明  strtol()会将参数nptr字符串根据参数base来转换成长整型数。参数base范围从2至36，或0。 参数base代表采用的进制方式，如 base值为10则采用10进制，若base值为16则采用16进制等。当base值为0时则是采用10进制做转换，但遇到如'0x'前置字符则会使用 16进制做转换。一开始strtol()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时('')结束转换，并将结果返回。若参数endptr不为NULL，则会将遇到不合条件而终止的nptr中的字符指针由endptr返回。
返回值    返回转换后的长整型数，否则返回ERANGE并将错误代码存入errno中。
附加说明  ERANGE指定的转换字符串超出合法范围。
范例    
#include<stdlib.h>
main()
{
char a[]=”1000000000”;
char b[]=”1000000000”;
char c[]=”ffff”;
printf(“a=%d ”,strtol(a,NULL,10));
printf(“b=%d ”,strtol(b,NULL,2));
printf(“c=%d ”,strtol(c,NULL,16));
}
执行
a=1000000000
b=512
c=65535